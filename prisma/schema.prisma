generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model agencies {
  id                     String                   @id
  name                   String
  slug                   String                   @unique
  domain                 String?                  @unique
  primaryColor           String                   @default("#3b82f6")
  secondaryColor         String                   @default("#1e40af")
  logo                   String?
  plan                   String                   @default("starter")
  status                 String                   @default("active")
  maxUsers               Int                      @default(5)
  maxConversations       Int                      @default(100)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  ga4PropertyId          String?
  ga4PropertyName        String?
  ga4RefreshToken        String?
  conversations          conversations[]
  dealership_onboardings dealership_onboardings[]
  escalations            escalations[]
  orders                 orders[]
  report_schedules       report_schedules[]
  seoworks_tasks         seoworks_tasks[]
  themes                 themes?
  usage_metrics          usage_metrics[]
  user_invites           user_invites[]
  users                  users[]
}

model audit_logs {
  id         String   @id
  action     String
  entityType String
  entityId   String
  userEmail  String
  details    Json?
  createdAt  DateTime @default(now())
  users      users    @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@index([entityType, entityId])
  @@index([userEmail, createdAt])
}

model conversations {
  id            String        @id
  title         String
  model         String        @default("gpt-4-turbo")
  agencyId      String
  userId        String
  messageCount  Int           @default(0)
  lastMessage   String?
  lastMessageAt DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  agencies      agencies      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  users         users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  escalations   escalations[]
  messages      messages[]

  @@index([agencyId, updatedAt])
  @@index([agencyId, userId])
}

model dealership_onboardings {
  id                  String    @id
  agencyId            String
  businessName        String
  package             String
  mainBrand           String
  otherBrand          String?
  address             String
  city                String
  state               String
  zipCode             String
  contactName         String
  contactTitle        String
  email               String
  phone               String
  websiteUrl          String
  billingEmail        String
  siteAccessNotes     String?
  targetVehicleModels String[]
  targetCities        String[]
  targetDealers       String[]
  submittedBy         String
  status              String    @default("pending")
  seoworksResponse    Json?
  submittedAt         DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime
  agencies            agencies  @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId, createdAt])
  @@index([agencyId, status])
}

model escalations {
  id             String        @id
  agencyId       String
  userId         String
  userEmail      String
  conversationId String
  subject        String
  description    String
  priority       String        @default("medium")
  category       String?
  chatContext    Json?
  status         String        @default("pending")
  assignedTo     String?
  assignedAt     DateTime?
  resolution     String?
  resolvedBy     String?
  resolvedAt     DateTime?
  internalNotes  String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  agencies       agencies      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  conversations  conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  users          users         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([agencyId, status])
  @@index([assignedTo, status])
  @@index([conversationId])
  @@index([userId, status])
}

model feature_flag_overrides {
  id                String   @id
  agencyId          String
  flagKey           String
  enabled           Boolean
  rolloutPercentage Int      @default(100)
  createdAt         DateTime @default(now())
  updatedAt         DateTime

  @@unique([agencyId, flagKey])
}

model messages {
  id             String        @id
  content        String
  role           String
  model          String?
  agencyId       String
  conversationId String
  userId         String
  tokenCount     Int?
  responseTime   Int?
  createdAt      DateTime      @default(now())
  conversations  conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  users          users         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([agencyId, conversationId])
  @@index([agencyId, createdAt])
}

model orders {
  id              String          @id
  agencyId        String?
  userEmail       String
  taskType        String
  title           String
  description     String
  status          String          @default("pending")
  assignedTo      String?
  estimatedHours  Float?
  actualHours     Float?
  deliverables    Json?
  completionNotes String?
  qualityScore    Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  completedAt     DateTime?
  seoworksTaskId  String?
  agencies        agencies?       @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  users           users           @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  seoworks_tasks  seoworks_tasks?

  @@index([agencyId, status])
  @@index([userEmail, status])
}

model report_schedules {
  id                  String    @id
  agencyId            String
  cronPattern         String
  ga4PropertyId       String
  userId              String
  reportType          String
  emailRecipients     String[]
  brandingOptionsJson String?
  isActive            Boolean   @default(true)
  lastRun             DateTime?
  nextRun             DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime
  agencies            agencies  @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  users               users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([isActive, nextRun])
  @@index([userId])
}

model seoworks_tasks {
  id              String    @id
  externalId      String    @unique
  taskType        String
  status          String
  completionDate  DateTime?
  postTitle       String
  postUrl         String?
  completionNotes String?
  isWeekly        Boolean   @default(false)
  payload         Json?
  orderId         String?   @unique
  agencyId        String?
  receivedAt      DateTime  @default(now())
  processedAt     DateTime?
  agencies        agencies? @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  orders          orders?   @relation(fields: [orderId], references: [id])

  @@index([agencyId, status])
  @@index([externalId])
  @@index([taskType, status])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model themes {
  id             String   @id
  agencyId       String   @unique
  companyName    String
  primaryColor   String
  secondaryColor String
  logo           String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  agencies       agencies @relation(fields: [agencyId], references: [id], onDelete: Cascade)
}

model usage_metrics {
  id         String   @id
  agencyId   String
  metricType String
  value      Int
  model      String?
  date       DateTime @default(now())
  period     String   @default("daily")
  agencies   agencies @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId, date])
  @@index([agencyId, metricType, date])
}

model user_ga4_tokens {
  id                    String    @id
  userId                String    @unique
  encryptedAccessToken  String
  encryptedRefreshToken String?
  expiryDate            DateTime?
  scope                 String?
  tokenType             String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  users                 users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user_invites {
  id           String    @id
  email        String
  role         String    @default("user")
  isSuperAdmin Boolean   @default(false)
  agencyId     String?
  invitedBy    String
  token        String    @unique
  status       String    @default("pending")
  acceptedAt   DateTime?
  expiresAt    DateTime  @default(dbgenerated("(now() + '7 days'::interval)"))
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  agencies     agencies? @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  users        users     @relation(fields: [invitedBy], references: [id])

  @@unique([email, agencyId])
  @@index([email, status])
  @@index([token])
}

model user_search_console_tokens {
  id                    String    @id
  userId                String    @unique
  encryptedAccessToken  String
  encryptedRefreshToken String?
  expiryDate            DateTime?
  scope                 String?
  verifiedSites         String[]
  primarySite           String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  users                 users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                         String                      @id
  name                       String?
  email                      String                      @unique
  emailVerified              DateTime?
  image                      String?
  agencyId                   String?
  role                       String                      @default("user")
  theme                      String?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime
  isSuperAdmin               Boolean                     @default(false)
  accounts                   accounts[]
  audit_logs                 audit_logs[]
  conversations              conversations[]
  escalations                escalations[]
  messages                   messages[]
  orders                     orders[]
  report_schedules           report_schedules[]
  sessions                   sessions[]
  user_ga4_tokens            user_ga4_tokens?
  user_invites               user_invites[]
  user_search_console_tokens user_search_console_tokens?
  agencies                   agencies?                   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
