'use client'\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Switch } from '@/components/ui/switch'\nimport { Badge } from '@/components/ui/badge'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\nimport { Mail, Search, Filter, Users, Settings, Send, Eye } from 'lucide-react'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\n\ninterface User {\n  id: string\n  name: string | null\n  email: string\n  role: string\n  agencyId: string | null\n  preferences: {\n    emailNotifications: boolean\n    taskCompleted: boolean\n    requestCreated: boolean\n    statusChanged: boolean\n    weeklySummary: boolean\n  } | null\n}\n\ninterface Agency {\n  id: string\n  name: string\n  domain: string\n  userCount: number\n}\n\nexport function ContentNotificationAdminPanel() {\n  const [users, setUsers] = useState<User[]>([])\n  const [agencies, setAgencies] = useState<Agency[]>([])\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [selectedAgency, setSelectedAgency] = useState<string>('all')\n  const [filterEnabled, setFilterEnabled] = useState<string>('all')\n  const [saving, setSaving] = useState<string | null>(null)\n  const [message, setMessage] = useState<{ type: 'success' | 'error', text: string } | null>(null)\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  const fetchData = async () => {\n    setLoading(true)\n    try {\n      // Fetch users with preferences\n      const usersRes = await fetch('/api/admin/users/notification-preferences')\n      if (usersRes.ok) {\n        const usersData = await usersRes.json()\n        setUsers(usersData.users || [])\n      }\n\n      // Fetch agencies\n      const agenciesRes = await fetch('/api/admin/agencies')\n      if (agenciesRes.ok) {\n        const agenciesData = await agenciesRes.json()\n        setAgencies(agenciesData.agencies || [])\n      }\n    } catch (error) {\n      setMessage({ type: 'error', text: 'Failed to load data' })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updateUserPreference = async (userId: string, preference: string, enabled: boolean) => {\n    setSaving(userId)\n    try {\n      const res = await fetch(`/api/admin/users/${userId}/preferences`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ [preference]: enabled })\n      })\n\n      if (res.ok) {\n        // Update local state\n        setUsers(users.map(user => \n          user.id === userId \n            ? {\n                ...user,\n                preferences: {\n                  ...user.preferences!,\n                  [preference]: enabled\n                }\n              }\n            : user\n        ))\n        setMessage({ type: 'success', text: `Updated ${preference} for user` })\n        setTimeout(() => setMessage(null), 3000)\n      } else {\n        setMessage({ type: 'error', text: 'Failed to update preference' })\n      }\n    } catch (error) {\n      setMessage({ type: 'error', text: 'Failed to update preference' })\n    } finally {\n      setSaving(null)\n    }\n  }\n\n  const testContentNotification = async (userId: string, taskType: string) => {\n    try {\n      const res = await fetch('/api/test/webhook', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          taskType, \n          userId,\n          title: `Test ${taskType} notification for user`\n        })\n      })\n\n      if (res.ok) {\n        setMessage({ type: 'success', text: `Test notification sent to user` })\n        setTimeout(() => setMessage(null), 3000)\n      } else {\n        setMessage({ type: 'error', text: 'Failed to send test notification' })\n      }\n    } catch (error) {\n      setMessage({ type: 'error', text: 'Failed to send test notification' })\n    }\n  }\n\n  // Filter users based on search and filters\n  const filteredUsers = users.filter(user => {\n    const matchesSearch = !searchTerm || \n      user.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase())\n    \n    const matchesAgency = selectedAgency === 'all' || user.agencyId === selectedAgency\n    \n    const matchesFilter = filterEnabled === 'all' || \n      (filterEnabled === 'enabled' && user.preferences?.emailNotifications && user.preferences?.taskCompleted) ||\n      (filterEnabled === 'disabled' && (!user.preferences?.emailNotifications || !user.preferences?.taskCompleted))\n    \n    return matchesSearch && matchesAgency && matchesFilter\n  })\n\n  const stats = {\n    total: users.length,\n    enabled: users.filter(u => u.preferences?.emailNotifications && u.preferences?.taskCompleted).length,\n    disabled: users.filter(u => !u.preferences?.emailNotifications || !u.preferences?.taskCompleted).length\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-bold\">Content Notification Management</h2>\n        <p className=\"text-muted-foreground mt-1\">\n          Manage content notification preferences for all users\n        </p>\n      </div>\n\n      {message && (\n        <Alert className={message.type === 'success' ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}>\n          <AlertDescription className={message.type === 'success' ? 'text-green-800' : 'text-red-800'}>\n            {message.text}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Users</p>\n                <p className=\"text-2xl font-bold\">{stats.total}</p>\n              </div>\n              <Users className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Notifications Enabled</p>\n                <p className=\"text-2xl font-bold text-green-600\">{stats.enabled}</p>\n              </div>\n              <Mail className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Notifications Disabled</p>\n                <p className=\"text-2xl font-bold text-red-600\">{stats.disabled}</p>\n              </div>\n              <Settings className=\"h-8 w-8 text-red-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search\">Search Users</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search by name or email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-9\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"agency-filter\">Filter by Agency</Label>\n              <Select value={selectedAgency} onValueChange={setSelectedAgency}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Agencies</SelectItem>\n                  {agencies.map((agency) => (\n                    <SelectItem key={agency.id} value={agency.id}>\n                      {agency.name} ({agency.userCount} users)\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"status-filter\">Filter by Status</Label>\n              <Select value={filterEnabled} onValueChange={setFilterEnabled}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Users</SelectItem>\n                  <SelectItem value=\"enabled\">Notifications Enabled</SelectItem>\n                  <SelectItem value=\"disabled\">Notifications Disabled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Users Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>User Notification Preferences</CardTitle>\n          <CardDescription>\n            Showing {filteredUsers.length} of {users.length} users\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"animate-pulse space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-12 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>User</TableHead>\n                  <TableHead>Agency</TableHead>\n                  <TableHead>Email Notifications</TableHead>\n                  <TableHead>Content Notifications</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredUsers.map((user) => {\n                  const agency = agencies.find(a => a.id === user.agencyId)\n                  return (\n                    <TableRow key={user.id}>\n                      <TableCell>\n                        <div>\n                          <p className=\"font-medium\">{user.name || 'No name'}</p>\n                          <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                          <Badge variant=\"outline\" className=\"text-xs mt-1\">\n                            {user.role}\n                          </Badge>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {agency ? (\n                          <div>\n                            <p className=\"font-medium\">{agency.name}</p>\n                            <p className=\"text-xs text-muted-foreground\">{agency.domain}</p>\n                          </div>\n                        ) : (\n                          <span className=\"text-muted-foreground\">No agency</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Switch\n                          checked={user.preferences?.emailNotifications || false}\n                          onCheckedChange={(checked) => \n                            updateUserPreference(user.id, 'emailNotifications', checked)\n                          }\n                          disabled={saving === user.id}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Switch\n                          checked={(user.preferences?.taskCompleted && user.preferences?.emailNotifications) || false}\n                          onCheckedChange={(checked) => \n                            updateUserPreference(user.id, 'taskCompleted', checked)\n                          }\n                          disabled={saving === user.id || !user.preferences?.emailNotifications}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => testContentNotification(user.id, 'page')}\n                            disabled={!user.preferences?.emailNotifications || !user.preferences?.taskCompleted}\n                          >\n                            <Send className=\"h-3 w-3 mr-1\" />\n                            Test\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => window.open('/api/email/preview/content?type=page', '_blank')}\n                          >\n                            <Eye className=\"h-3 w-3 mr-1\" />\n                            Preview\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )\n                })}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}