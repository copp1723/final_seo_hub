generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for type safety
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RequestPriority {
  LOW
  MEDIUM
  HIGH
}

enum PackageType {
  SILVER
  GOLD
  PLATINUM
}

// Core user model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  role          UserRole  @default(USER)
  
  // Multi-tenant relationship
  agencyId      String?
  agency        Agency?   @relation(fields: [agencyId], references: [id])
  
  // OAuth accounts
  accounts      Account[]
  sessions      Session[]
  
  // User's requests
  requests      Request[]
  
  // User's deliverables
  deliverables  Deliverable[]
  
  // User's time entries
  timeEntries   TimeEntry[]
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([email])
  @@index([agencyId])
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Multi-tenant agency model
model Agency {
  id          String    @id @default(cuid())
  name        String
  domain      String?   @unique
  
  // Agency settings
  settings    Json      @default("{}")
  
  // Relationships
  users       User[]
  requests    Request[]
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([domain])
}

// Main request model (formerly orders)
model Request {
  id            String    @id @default(cuid())
  
  // User relationship
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  // Agency relationship
  agencyId      String?
  agency        Agency?   @relation(fields: [agencyId], references: [id])
  
  // Request details
  title         String
  description   String    @db.Text
  type          String    // page, blog, gbp_post, maintenance
  priority      RequestPriority @default(MEDIUM)
  status        RequestStatus   @default(PENDING)
  
  // SEO Package info
  packageType   PackageType?
  
  // SEO specific fields
  keywords      Json?     // Array of keywords
  targetUrl     String?
  
  // Completed content info
  contentUrl    String?   // URL to published content
  pageTitle     String?   // SEO title of content
  
  // Progress tracking
  completedAt   DateTime?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([userId, status])
  @@index([agencyId, status])
  @@index([status, createdAt])
}

// Deliverable model for tracking individual content pieces
model Deliverable {
  id            String    @id @default(cuid())
  
  // User relationship
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  // Content details
  type          String    // page, blog, gbp_post
  title         String
  url           String?
  status        RequestStatus @default(PENDING)
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  completedAt   DateTime?
  
  @@index([userId, status])
  @@index([status, createdAt])
}

// Time tracking for internal use
model TimeEntry {
  id            String    @id @default(cuid())
  
  // User relationship
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  // Time details
  description   String
  hours         Float
  date          DateTime
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([userId, date])
}