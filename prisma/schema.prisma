generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for type safety
enum UserRole {
  USER
  DEALERSHIP_ADMIN
  AGENCY_ADMIN
  SUPER_ADMIN
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RequestPriority {
  LOW
  MEDIUM
  HIGH
}

enum PackageType {
  SILVER
  GOLD
  PLATINUM
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskType {
  PAGE
  BLOG
  GBP_POST
  IMPROVEMENT
}

// Core user model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          UserRole  @default(USER)
  
  // Multi-tenant relationships
  agencyId     String?
  agency       Agency?     @relation(fields: [agencyId], references: [id])
  dealershipId String?
  dealership   Dealership? @relation(fields: [dealershipId], references: [id])

  // OAuth accounts
  accounts Account[]
  sessions Session[]

  // User's requests
  requests Request[]

  // User's tasks
  tasks Task[]
  
  // User preferences
  preferences   UserPreferences?
  
  // API access
  apiKey        String?   @unique
  apiKeyCreatedAt DateTime?

  // Onboarding status
  onboardingCompleted Boolean @default(false)

  // Audit logs
  auditLogs AuditLog[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([agencyId])
  @@index([dealershipId])
  @@index([apiKey])
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Multi-tenant agency model
model Agency {
  id     String  @id @default(cuid())
  name   String
  domain String? @unique

  // Agency settings
  settings Json @default("{}")

  // Relationships
  users        User[]
  requests     Request[]
  dealerships  Dealership[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([domain])
}

// Dealership model - represents individual dealer locations within an agency
model Dealership {
  id        String   @id @default(cuid())
  name      String
  address   String?
  phone     String?
  website   String?
  
  // Agency relationship
  agencyId  String
  agency    Agency   @relation(fields: [agencyId], references: [id])
  
  // Dealership settings and branding
  settings  Json     @default("{}")
  
  // Relationships
  users     User[]
  requests  Request[]
  
  // Analytics connections (dealership-specific)
  ga4Connection           GA4Connection?
  searchConsoleConnection SearchConsoleConnection?
  
  // Package and billing (dealership-specific)
  activePackageType          PackageType?
  currentBillingPeriodStart  DateTime?
  currentBillingPeriodEnd    DateTime?
  pagesUsedThisPeriod        Int          @default(0)
  blogsUsedThisPeriod        Int          @default(0)
  gbpPostsUsedThisPeriod     Int          @default(0)
  improvementsUsedThisPeriod Int          @default(0)
  
  // Monthly usage history
  monthlyUsageHistory MonthlyUsage[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([agencyId])
  @@index([name])
}

// Main request model (formerly orders)
model Request {
  id String @id @default(cuid())

  // User relationship
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Agency relationship
  agencyId String?
  agency   Agency? @relation(fields: [agencyId], references: [id])

  // Dealership relationship
  dealershipId String?
  dealership   Dealership? @relation(fields: [dealershipId], references: [id])

  // Request details
  title       String
  description String          @db.Text
  type        String // page, blog, gbp_post, maintenance
  priority    RequestPriority @default(MEDIUM)
  status      RequestStatus   @default(PENDING)

  // SEO Package info
  packageType PackageType?

  // SEOWorks integration
  seoworksTaskId String? // Direct mapping to SEOWorks task ID

  // Progress tracking (for current month)
  pagesCompleted        Int @default(0)
  blogsCompleted        Int @default(0)
  gbpPostsCompleted     Int @default(0)
  improvementsCompleted Int @default(0)

  // SEO specific fields
  keywords     Json? // Array of keywords
  targetUrl    String?
  targetCities Json? // Array of target cities
  targetModels Json? // Array of target models

  // Completed content info
  completedTasks Json? // Array of {title, url, type, completedAt}
  contentUrl     String? // Primary URL (deprecated, use completedTasks)
  pageTitle      String? // Primary title (deprecated, use completedTasks)

  // Progress tracking
  completedAt DateTime?

  // Tasks relationship
  tasks Task[]

  // SEOWorks task mappings
  seoworksTaskMappings SEOWorksTaskMapping[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, status])
  @@index([agencyId, status])
  @@index([dealershipId, status])
  @@index([status, createdAt])
  @@index([seoworksTaskId])
}

// GA4 Integration - now dealership-specific
model GA4Connection {
  id           String @id @default(cuid())
  dealershipId String @unique
  dealership   Dealership @relation(fields: [dealershipId], references: [id], onDelete: Cascade)

  // Encrypted tokens
  accessToken  String    @db.Text
  refreshToken String?   @db.Text
  expiresAt    DateTime?

  // GA4 specific
  propertyId   String?
  propertyName String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model for storing historical monthly usage - now dealership-specific
model MonthlyUsage {
  id           String @id @default(cuid())
  dealershipId String
  dealership   Dealership @relation(fields: [dealershipId], references: [id], onDelete: Cascade)

  month Int // 1-12
  year  Int

  packageType PackageType // The package type active for this period

  pagesUsed        Int
  blogsUsed        Int
  gbpPostsUsed     Int
  improvementsUsed Int

  archivedAt DateTime @default(now())

  @@unique([dealershipId, month, year]) // Ensure only one record per dealership per month
  @@index([dealershipId])
}

// Search Console Integration - now dealership-specific
model SearchConsoleConnection {
  id           String @id @default(cuid())
  dealershipId String @unique
  dealership   Dealership @relation(fields: [dealershipId], references: [id], onDelete: Cascade)

  // Encrypted tokens
  accessToken  String    @db.Text
  refreshToken String?   @db.Text
  expiresAt    DateTime?

  // Search Console specific
  siteUrl           String?
  siteName          String?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// User preferences for notifications and settings
model UserPreferences {
  id                  String    @id @default(cuid())
  userId              String    @unique
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Notification preferences
  emailNotifications  Boolean   @default(true)
  requestCreated      Boolean   @default(true)
  statusChanged       Boolean   @default(true)
  taskCompleted       Boolean   @default(true)
  weeklySummary       Boolean   @default(true)
  marketingEmails     Boolean   @default(false)
  
  // Other preferences
  timezone            String?   @default("America/New_York")
  language            String?   @default("en")
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

// Task model for enhanced task visibility
model Task {
  id String @id @default(cuid())

  // User relationship
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Request relationship
  requestId String
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  // Task details
  title       String
  description String?        @db.Text
  type        TaskType
  status      TaskStatus     @default(PENDING)
  priority    RequestPriority @default(MEDIUM)

  // SEO specific fields
  targetUrl    String?
  targetCity   String?
  targetModel  String?
  keywords     Json? // Array of keywords

  // Completion info
  completedUrl   String?
  completedTitle String?
  completedNotes String? @db.Text

  // Timeline
  dueDate     DateTime?
  startedAt   DateTime?
  completedAt DateTime?

  // Metadata
  metadata Json? // Additional task-specific data

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, status])
  @@index([requestId, status])
  @@index([status, dueDate])
  @@index([type, status])
}

// Audit logging for compliance and security
model AuditLog {
  id String @id @default(cuid())
  
  // User who performed the action
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Action details
  action     String // e.g., "USER_CREATE", "SYSTEM_SETTINGS_UPDATE", "REQUEST_DELETE"
  resource   String // e.g., "User", "Request", "SystemSettings"
  resourceId String? // ID of the affected resource
  
  // Additional context
  details   Json? // Additional action-specific data
  ipAddress String?
  userAgent String?
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}

// System-wide configuration settings
model SystemSettings {
  id String @id @default(cuid())
  
  // Feature flags
  maintenanceMode     Boolean @default(false)
  newUserRegistration Boolean @default(true)
  emailNotifications  Boolean @default(true)
  auditLogging        Boolean @default(true)
  
  // Limits and quotas
  maxUsersPerAgency   Int @default(50)
  maxRequestsPerUser  Int @default(1000)
  maxFileUploadSize   Int @default(10) // MB
  
  // Email settings
  smtpHost      String @default("")
  smtpPort      Int    @default(587)
  smtpUser      String @default("")
  smtpFromEmail String @default("")
  
  // System messages
  maintenanceMessage String @default("The system is currently under maintenance. Please try again later.")
  welcomeMessage     String @default("Welcome to our SEO management platform! Get started by exploring your dashboard.")
  
  // API settings
  rateLimitPerMinute     Int @default(60)
  sessionTimeoutMinutes  Int @default(480) // 8 hours
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// SEOWorks task mapping for tracking external task IDs
model SEOWorksTaskMapping {
  id String @id @default(cuid())
  
  // Request relationship
  requestId String
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  
  // SEOWorks task details
  seoworksTaskId String @unique
  taskType       String
  status         String @default("pending")
  
  // Additional metadata
  metadata Json? // Store additional SEOWorks task data
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([requestId])
  @@index([seoworksTaskId])
  @@index([status])
}